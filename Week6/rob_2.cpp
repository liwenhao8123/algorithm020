/*
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
*/

//方法二：  时间复杂度O(n)  空间复杂度O(n)
//利用一维数组DP[0..n], 定义出DP方程：
//dp[i] = max(dp[i-1] + 0, nums[i]+dp[i-2])
//对于第 i 个房子，取第i-1个房子+0，与nums[i]+第i-2个房子 的较大值
//当然也可以nums[i]+第i-3个房子或nums[i]+第i-4个房子
//仔细思考下在计算dp[i-2]时，它的值一定是大于i-3和i-4的，所以可以忽略

class Solution {
public:
    int rob(vector<int>& nums) {
        if (nums.empty())
            return 0;
        int n = nums.size();
        if (n == 1)
            return nums[0];

        vector<int> dp(n, 0);
        
        dp[0] = max(0, nums[0]);
        dp[1] = max(dp[0], nums[1]);

        for (int i = 2; i < n; i++){
            dp[i] = max(dp[i-1], nums[i] + dp[i-2]);
        }
        return dp[n-1];
    }
};