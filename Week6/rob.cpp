/*
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
*/

//方法一：  时间复杂度O(n)  空间复杂度O(n)
//利用二维数组DP[0..n][0..1]对于每一个dp[i], 其中dp[i][0]表示第i个不偷，dp[i][1]表示第i个偷
//因此定义出DP方程：
//dp[i][0] = dp[i-1][1]  i不偷 i-1偷
//这里有一个点是dp[i-1][1] 与 dp[i-1][0]不确定谁大，所以需要优化为
//dp[i][0] = max(dp[i-1][1], dp[i-1][0])
//如果第 i 个房子要偷，则DP方程如下:
//dp[i][1] = nums[i] + dp[i-1][0];

class Solution {
public:
    int rob(vector<int>& nums) {
        if (nums.empty())
            return 0;
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(2));

        dp[0][0] = 0;
        dp[0][1] = nums[0];

        for (int i = 1; i < n; i++){
            dp[i][0] = max(dp[i-1][1], dp[i-1][0]);
            dp[i][1] = nums[i] + dp[i-1][0];
        }
        return max(dp[n-1][1], dp[n-1][0]);
    }
};